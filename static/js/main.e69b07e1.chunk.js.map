{"version":3,"sources":["Components/FoodSelection.js","Components/FoodInput.js","Components/DisplayResult.js","Components/FavoriteFoods.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["FoodSelection","selectionItems","selectedFood","setSelectedFood","className","data-test","id","value","onChange","e","target","type","data-toggle","data-target","FoodInput","newFood","setNewFood","addNewFood","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","placeholder","onClick","DisplayResult","FavoriteFoods","useState","name","foods","setfoods","map","food","key","preventDefault","alert","NavBar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e69b07e1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst FoodSelection = ({ selectionItems, selectedFood, setSelectedFood }) => {\n  return (\n    <div\n      className=\"container d-flex justify-content-center\"\n      data-test=\"foodselection\"\n    >\n      <div className=\"col-sm-6 \">\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\">Select food</label>\n          </div>\n          <select\n            className=\"custom-select\"\n            id=\"inputGroupSelect01\"\n            value={selectedFood}\n            onChange={e => setSelectedFood(e.target.value)}\n          >\n            {selectionItems}\n          </select>\n        </div>\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-info btn-sm \"\n            data-toggle=\"modal\"\n            data-target=\"#exampleModal\"\n            data-test=\"btn-test\"\n          >\n            Add new food\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FoodSelection;\n","import React from \"react\";\n\nconst FoodInput = ({ newFood, setNewFood, addNewFood }) => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"exampleModal\"\n      tabIndex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Modal title\n            </h5>\n            <button\n              type=\"button\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            <form>\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\"></div>\n                <input\n                  type=\"text\"\n                  className=\"form-control form-control-sm\"\n                  placeholder=\"Enter your favorite food\"\n                  value={newFood}\n                  onChange={e => setNewFood(e.target.value)}\n                />\n              </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n            >\n              Close\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-dismiss=\"modal\"\n              onClick={addNewFood}\n            >\n              Save changes\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FoodInput;\n","import React from \"react\";\n\nconst DisplayResult = ({ selectedFood, setSelectedFood }) => {\n  return (\n    <div className=\"container d-flex justify-content-center pt-4\">\n      <div className=\"card text-center\">\n        <div className=\"card-header\"></div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Your Special Food</h5>\n          <p className=\"card-text\">\n            Hey! your favourite food is {selectedFood}\n          </p>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger btn-sm\"\n            onClick={e => setSelectedFood(\"\")}\n          >\n            clear\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayResult;\n","import React, { useState } from \"react\";\nimport FoodSelection from \"./FoodSelection\";\nimport FoodInput from \"./FoodInput\";\nimport DisplayResult from \"./DisplayResult\";\n\nconst FavoriteFoods = () => {\n  const [foods, setfoods] = useState([\n    { name: \"pizza\", value: \"pizza\" },\n    { name: \"hamburger\", value: \"hamburger\" },\n    { name: \"salad\", value: \"salad\" }\n  ]);\n  const [selectedFood, setSelectedFood] = useState(\"\");\n  const [newFood, setNewFood] = useState(\"\");\n\n  // food selection options\n  const selectionItems = foods.map(food => (\n    <option key={food.name} value={food.value}>\n      {food.name}\n    </option>\n  ));\n\n  // handle new food input\n  const addNewFood = e => {\n    e.preventDefault();\n    if (newFood === \"\") {\n      alert(\"Please enter a valid food\");\n    } else {\n      setfoods([...foods, { name: newFood, value: newFood }]);\n      setNewFood(\"\");\n    }\n  };\n\n  return (\n    <div className=\"mt-5 container \" data-test=\"favoriteFoods\">\n      <div className=\"row\">\n        <div className=\"col-md-12 text-center \">\n          <h1 className=\"display-6 text-warning\">MY FAVORITE FOOD</h1>\n          <p className=\"lead text-white\">choose your favorite food</p>\n        </div>\n        <FoodSelection\n          selectionItems={selectionItems}\n          selectedFood={selectedFood}\n          setSelectedFood={setSelectedFood}\n        />\n        <FoodInput\n          newFood={newFood}\n          setNewFood={setNewFood}\n          addNewFood={addNewFood}\n        />\n        {selectedFood === \"\" ? null : (\n          <DisplayResult\n            selectedFood={selectedFood}\n            setSelectedFood={setSelectedFood}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FavoriteFoods;\n","import React from \"react\";\n\nconst NavBar = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-info mb-4\">\n        <div className=\"container text-white\">\n          <h2 className=\"navbar-brand\">FOOD MASTER</h2>\n        </div>\n      </nav>\n    </div>\n  );\n};\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport FavoriteFoods from \"./Components/FavoriteFoods\";\nimport NavBar from \"./Components/NavBar\";\n\nfunction App() {\n  return (\n    <div data-test=\"app-test\">\n      <NavBar />\n      <div className=\"container\">\n        <FavoriteFoods />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}